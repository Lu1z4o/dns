/*______________________________________
Luis Felipe Silva Guimar√£es - 1282887
*/

#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <netdb.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <arpa/inet.h>

int showIp(const char *getHost);

int main(void)
{
  char getHost[256];
  int count;

  do
  {
    bzero(getHost, 256);
    printf("digite o dns da consulta:");
    fgets(getHost, 256, stdin);

    count = strlen(getHost);
    getHost[count - 1] = '\0';

    if (strlen(getHost) > 0)
      showIp(getHost);
    else
      return EXIT_SUCCESS;

  } while (1);
}

int showIp(const char *getHost)
{
  struct addrinfo hints, *res;
  int status;
  char address[100];
  void *result;

  memset(&hints, 0, sizeof(hints));
  hints.ai_family = PF_UNSPEC;
  hints.ai_socktype = SOCK_STREAM;
  hints.ai_flags |= AI_CANONNAME;

  status = getaddrinfo(getHost, NULL, &hints, &res);
  if (status != 0)
  {
    perror("getaddrinfo");
    return -1;
  }

  printf("\n digite o dns para consulta: %s\n", getHost);
  while (res)
  {

    inet_ntop(res->ai_family, res->ai_addr->sa_data, address, 100);

    if (res->ai_family == AF_INET)
      result = &((struct sockaddr_in *)res->ai_addr)->sin_addr;
    else if (res->ai_family == AF_INET6)
      result = &((struct sockaddr_in6 *)res->ai_addr)->sin6_addr;

    inet_ntop(res->ai_family, result, address, 100);

    printf("endrerco dns informado: %s \n", res->ai_canonname);
    if (res->ai_family == PF_INET6)
    {
      printf("endereco ipv6: %s\n", address);
    }
    else
    {
      printf("endrerco ipv4: %s\n", address);
    }
    res = res->ai_next;
  }
  return 0;
}